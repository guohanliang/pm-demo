================
   2017-5-22
================
vue
组件和路由

组件：大的对象

函数的封装
面向对象
模块化
-----------------
全局的组件
    组件的定义
        var Aaa=Vue.extend({
            data:{
                a:'我是头部aaaa'
            },
            template:'<h1>{{a}}</h1>'
        });

        Vue.component('aaa',Aaa);

        注：数据：必须是函数的形式，函数必须返回一个对象(json)
    组件的使用
        <div id="box">
            <aaa></aaa>
        </div>
局部组件
    组件的定义
        var Bbb=Vue.extend({
            template:'<div>这是局部组件</div>'
        });

        var vm=new Vue({
            el:'#box',
            data:{},
            methods:{},
            components:{
                'bbb':Bbb
            }
        });
        注意：components，加s
    组件的使用
       <div id="box">
           <aaa></aaa>
       </div>
第三种组件
    Vue.component('ccc',{
        data(){
            return {
                msg:'^_^'
            }
        },
        template:'<i>这是第三种组件{{msg}}</i>'
    });
第四种组件
    var vm=new Vue({
        el:'#box',
        components:{
            'ccc':{
                template:'<i>第四种组件</i>'
            }
        }
    });
动态组件：
    <component :is="a"></component>
    注：a对应着不用的组件的名字
-------------------------
组件中模板的写法
    template:'<i>第四种组件</i>'  字符串

    <script type="x-template" id="ddd">   script标签
        <div>
            <i>这是第二种模板</i>
            <span>你好</span>
        </div>
    </script>

    <template id="eee">            html标签
        <div>则是第三个模板</div>
    </template>
----------------------------------
组件之间的通信
    在vue中默认子父组件之间不能数据公用
    子组件获取父组件的数据
        在父级模板中：
            <template id="aaa">
                <h1>111</h1>
                <bbb :mmm="msg"></bbb>  //msg是父级的数据
            </template>
        在子组件的对象中：
             props:['mmm'],
             template:'<i>我是子组件--->{{mmm}}</i>'
    父组件获取子组件的数据
        子级通过事件发送
            this.$emit('child-msg',this.a) //a就是子级的数据
        父级接收：
            在父组件模板中
                <span>我是父组件--->{{msg}}</span>
                <bbb @child-msg="get"></bbb>
            在父级方法中
                methods:{
                    get:function(msg){
                        //alert(msg)
                    }
                }
----------------------
组件的占位
    <div id="box">
        <aaa>
            <ul>
                <li>1111</li>
                <li>2222</li>
                <li>3333</li>
            </ul>
        </aaa>
    </div>

    <template id="aaa">
        <slot></slot>
        <h1>我是h1</h1>
    </template>
多个占位符
    <ul slot="ul-slot">
      。。。
    </ul>
    <ol slot="ol-slot">
        。。。
    </ol>


    <slot name="ul-slot"></slot>
    <h1>我是h1</h1>
    <slot name="ol-slot"></slot>
------------------------
2.0组件
    3、4两种组件的方法可以使用,
    注：模板必须有一个根元素来包裹代码
    extend方法更改废除

    多了一种更简洁方法，类似extend

    全局
        var Aaa={  //这是2.0的 类似extentd
            template:'#aaa'
        };

        Vue.component('aaa',Aaa);

        var vm=new Vue({
            el:'#box',
            data:{
            }
        });

    局部
        var Aaa={  //这是2.0的 类似extentd
            template:'#aaa'
        };

        var vm=new Vue({
            el:'#box',
            data:{},
            components:{
                'aaa':Aaa
            }
        });

2.0组件间的通信
    1.0：
        vm.$dispatch  子级向父级传送数据
        vm.$broadcast 父级给自己传送数据
            配合：events:{}
    2.0  单一事件管理组件通讯
        $.emit
        $.on
    1、设置一个中间件
    var Event=new Vue()
    2、发送
    Event.$emit('a-msg',this.a);
    3、接收
    mounted:function(){
       var _this=this;
       Event.$on('a-msg',function(msg){
           _this.a=msg
       })
    }
    注：this有问题
------------------------
路由  /router.vuejs.org
    用来做单页面开发

1.0
    模板的定义
        ul>
            <li><a v-link="{path:'/home'}">主页</a></li>
            <li><a v-link="{path:'/news'}">新闻页</a></li>
            <li><a v-link="{path:'/list'}">列表页</a></li>
        </ul>
        <div>
            <router-view></router-view>
        </div>
    路由的配置
        //1、准备一个根组件
        var app=Vue.extend();
        //2、准备相对应的模板
        var Home=Vue.extend({
            template:'<h2>我是主页</h2>'
        });
        //3、准备路由
        var router=new VueRouter();  //引入玩文件就有
        //4、配置（关联）路由
        router.map({
            '/home':{
                component:Home
            }
        });
        //5启动路由
        router.start(app,'#box');
        //6、重定向
        router.redirect({
            '/':'/home'
        });
2.0
    模板的定义
        <div>
            <router-link to="/home">主页</router-link>
            <router-link to="/news">新闻页</router-link>
        </div>
        <div>
            <router-view></router-view>
        </div>
    路由的定义
        //定义组件
        var Home={
            template:'<h2>我是主页</h2>'
        };
        var News={
            template:'<h2>我是新闻页</h2>'
        };
        //配置路由
        var routes=[
            {path:'/home',component:Home},
            {path:'/news',component:News},
            {path:'*',redirect:'/home'}
        ];
        //生成路由的实例
        var router=new VueRouter({
            routes
        });
        //最后挂在vue身上
        new Vue({
            router,
            el:'#box'
        })
2.0路由的嵌套

------------------------
下来可以去看看 angular的控制器间数据的传递
vue1.0的嵌套












